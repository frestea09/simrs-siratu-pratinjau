// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS

enum UserRole {
  ADMIN_SISTEM
  PIC_MUTU
  PJ_RUANGAN
  KEPALA_UNIT_INSTALASI
  DIREKTUR
  SUB_KOMITE_PENINGKATAN_MUTU
  SUB_KOMITE_KESELAMATAN_PASIEN
  SUB_KOMITE_MANAJEMEN_RISIKO
}

enum IndicatorCategory {
  INM
  IMP_RS
  IMPU
  SPM
}

enum IndicatorFrequency {
  HARIAN
  MINGGUAN
  BULANAN
  TAHUNAN
}

enum SubmissionStatus {
  MENUNGGU_PERSETUJUAN
  DIVERIFIKASI
  DITOLAK
}

enum StandardUnit {
  PERSEN
  MENIT
}

enum IncidentType {
  KPC
  KNC
  KTC
  KTD
  SENTINEL
}

enum IncidentStatus {
  INVESTIGASI
  SELESAI
}

enum RiskSource {
  LAPORAN_INSIDEN
  KOMPLAIN
  SURVEY_RONDE
  RAPAT_BRAINSTORMING
  INVESTIGASI
  LITIGASI
  EXTERNAL_REQUIREMENT
}

enum RiskCategory {
  STRATEGIS
  OPERASIONAL
  FINANSIAL
  COMPLIANCE
  REPUTASI
  PELAYANAN_PASIEN
  BAHAYA_FISIK
  BAHAYA_KIMIA
  BAHAYA_BIOLOGI
  BAHAYA_ERGONOMI
  BAHAYA_PSIKOSOSIAL
}

enum RiskEvaluation {
  MITIGASI
  TRANSFER
  DITERIMA
  DIHINDARI
}

enum RiskStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

// MODELS

model User {
  id                      String                  @id @default(cuid())
  name                    String
  email                   String                  @unique
  password                String
  role                    UserRole
  unit                    String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  submittedIndicators     IndicatorSubmission[]   @relation("SubmittedByUser")
  indicatorDataEntries    IndicatorData[]         @relation("EnteredByUser")
  incidentsReported       Incident[]              @relation("ReportedByUser")
  risksPic                Risk[]                  @relation("PicForRisk")
  notifications           Notification[]
  logs                    SystemLog[]

  @@map("users")
}

model IndicatorSubmission {
  id                String            @id @default(cuid())
  name              String
  category          IndicatorCategory
  description       String            @db.Text
  unit              String
  frequency         IndicatorFrequency
  status            SubmissionStatus  @default(MENUNGGU_PERSETUJUAN)
  submissionDate    DateTime          @default(now())
  standard          Float
  standardUnit      StandardUnit
  rejectionReason   String?           @db.Text

  submittedById     String
  submittedBy       User              @relation("SubmittedByUser", fields: [submittedById], references: [id])
  
  data              IndicatorData[]

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("indicator_submissions")
}

model IndicatorData {
  id                String            @id @default(cuid())
  period            DateTime
  numerator         Float
  denominator       Float

  analysisNotes     String?           @db.Text
  followUpPlan      String?           @db.Text

  submissionId      String
  submission        IndicatorSubmission @relation(fields: [submissionId], references: [id])

  enteredById       String
  enteredBy         User              @relation("EnteredByUser", fields: [enteredById], references: [id])

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("indicator_data")
}

model Incident {
  id                      String          @id @default(cuid())
  date                    DateTime        @default(now())
  status                  IncidentStatus  @default(INVESTIGASI)

  patientName             String?
  medicalRecordNumber     String?
  careRoom                String?
  ageGroup                String?
  gender                  String?
  payer                   String?
  entryDate               DateTime?
  entryTime               String?

  incidentDate            DateTime?
  incidentTime            String?
  chronology              String?         @db.Text
  type                    IncidentType
  incidentSubject         String?
  incidentLocation        String?
  relatedUnit             String?

  firstAction             String?         @db.Text
  firstActionBy           String?
  hasHappenedBefore       String?
  severity                String // biru, hijau, kuning, merah
  patientImpact           String?
  analysisNotes           String?         @db.Text
  followUpPlan            String?         @db.Text

  reportedById            String?
  reportedBy              User?           @relation("ReportedByUser", fields: [reportedById], references: [id])

  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt

  @@map("incidents")
}

model Risk {
  id                    String          @id @default(cuid())
  unit                  String
  source                RiskSource
  description           String          @db.Text
  cause                 String          @db.Text
  category              RiskCategory
  submissionDate        DateTime        @default(now())

  consequence           Int
  likelihood            Int
  controllability       Int
  evaluation            RiskEvaluation
  actionPlan            String          @db.Text
  dueDate               DateTime?
  status                RiskStatus      @default(OPEN)

  residualConsequence   Int?
  residualLikelihood    Int?
  reportNotes           String?         @db.Text

  picId                 String?
  pic                   User?           @relation("PicForRisk", fields: [picId], references: [id])

  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  @@map("risks")
}

model Notification {
  id                String    @id @default(cuid())
  timestamp         DateTime  @default(now())
  title             String
  description       String
  isRead            Boolean   @default(false)
  link              String?

  recipientId       String
  recipient         User      @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}

model SystemLog {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  action      String
  details     String   @db.Text

  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@map("system_logs")
}
